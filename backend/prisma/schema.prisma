generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Teacher {
  id        String   @id @default(uuid())
  uid       String   @unique
  name      String
  picture   String?
  email     String   @unique
  isSynced  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]
}

model Class {
  id                     String       @id @default(uuid())
  code                   String       @unique
  name                   String
  numberOfStudents       Int
  classBlock             String?
  classRoom              String?
  acceptPresenceByQRCode Boolean      @default(false)
  teacherId              String
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  teacher                Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  enrollments            Enrollment[]
  lessons                Lesson[]
  schedules              Schedule[]
}

model Schedule {
  id        String  @id @default(uuid())
  weekDay   WeekDay
  startTime String
  endTime   String
  classId   String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Student {
  id                     String                  @id @default(uuid())
  enrollmentId           String                  @unique
  name                   String
  email                  String?                 @unique
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  classAttendanceRecords ClassAttendanceRecord[]
  enrollments            Enrollment[]
}

model Enrollment {
  id        String   @id @default(uuid())
  studentId String
  classId   String
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
}

model Lesson {
  id                     String                  @id @default(uuid())
  date                   DateTime                @default(now())
  classId                String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  classAttendanceRecords ClassAttendanceRecord[]
  class                  Class                   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model ClassAttendanceRecord {
  id        String   @id @default(uuid())
  present   Boolean  @default(false)
  studentId String
  lessonId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId])
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
